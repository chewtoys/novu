/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import {
  InvalidateQueryFilters,
  QueryClient,
  QueryFunctionContext,
  QueryKey,
  useQuery,
  UseQueryResult,
  useSuspenseQuery,
  UseSuspenseQueryResult,
} from "@tanstack/react-query";
import { NovuCore } from "../core.js";
import { subscribersPreferencesRetrieveByLevelLegacy } from "../funcs/subscribersPreferencesRetrieveByLevelLegacy.js";
import { combineSignals } from "../lib/primitives.js";
import { RequestOptions } from "../lib/sdks.js";
import * as operations from "../models/operations/index.js";
import { unwrapAsync } from "../types/fp.js";
import { useNovuContext } from "./_context.js";
import {
  QueryHookOptions,
  SuspenseQueryHookOptions,
  TupleToPrefixes,
} from "./_types.js";

export type SubscribersPreferencesRetrieveByLevelLegacyQueryData =
  operations.SubscribersV1ControllerGetSubscriberPreferenceByLevelResponse;

/**
 * Get subscriber preferences by level
 *
 * @deprecated method: This will be removed in a future release, please migrate away from it as soon as possible.
 */
export function useSubscribersPreferencesRetrieveByLevelLegacy(
  request:
    operations.SubscribersV1ControllerGetSubscriberPreferenceByLevelRequest,
  options?: QueryHookOptions<
    SubscribersPreferencesRetrieveByLevelLegacyQueryData
  >,
): UseQueryResult<SubscribersPreferencesRetrieveByLevelLegacyQueryData, Error> {
  const client = useNovuContext();
  return useQuery({
    ...buildSubscribersPreferencesRetrieveByLevelLegacyQuery(
      client,
      request,
      options,
    ),
    ...options,
  });
}

/**
 * Get subscriber preferences by level
 *
 * @deprecated method: This will be removed in a future release, please migrate away from it as soon as possible.
 */
export function useSubscribersPreferencesRetrieveByLevelLegacySuspense(
  request:
    operations.SubscribersV1ControllerGetSubscriberPreferenceByLevelRequest,
  options?: SuspenseQueryHookOptions<
    SubscribersPreferencesRetrieveByLevelLegacyQueryData
  >,
): UseSuspenseQueryResult<
  SubscribersPreferencesRetrieveByLevelLegacyQueryData,
  Error
> {
  const client = useNovuContext();
  return useSuspenseQuery({
    ...buildSubscribersPreferencesRetrieveByLevelLegacyQuery(
      client,
      request,
      options,
    ),
    ...options,
  });
}

export function prefetchSubscribersPreferencesRetrieveByLevelLegacy(
  queryClient: QueryClient,
  client$: NovuCore,
  request:
    operations.SubscribersV1ControllerGetSubscriberPreferenceByLevelRequest,
): Promise<void> {
  return queryClient.prefetchQuery({
    ...buildSubscribersPreferencesRetrieveByLevelLegacyQuery(
      client$,
      request,
    ),
  });
}

export function setSubscribersPreferencesRetrieveByLevelLegacyData(
  client: QueryClient,
  queryKeyBase: [
    preferenceLevel: operations.Parameter,
    subscriberId: string,
    parameters: {
      includeInactiveChannels?: boolean | undefined;
      idempotencyKey?: string | undefined;
    },
  ],
  data: SubscribersPreferencesRetrieveByLevelLegacyQueryData,
): SubscribersPreferencesRetrieveByLevelLegacyQueryData | undefined {
  const key = queryKeySubscribersPreferencesRetrieveByLevelLegacy(
    ...queryKeyBase,
  );

  return client.setQueryData<
    SubscribersPreferencesRetrieveByLevelLegacyQueryData
  >(key, data);
}

export function invalidateSubscribersPreferencesRetrieveByLevelLegacy(
  client: QueryClient,
  queryKeyBase: TupleToPrefixes<
    [
      preferenceLevel: operations.Parameter,
      subscriberId: string,
      parameters: {
        includeInactiveChannels?: boolean | undefined;
        idempotencyKey?: string | undefined;
      },
    ]
  >,
  filters?: Omit<InvalidateQueryFilters, "queryKey" | "predicate" | "exact">,
): Promise<void> {
  return client.invalidateQueries({
    ...filters,
    queryKey: [
      "@novu/api",
      "Preferences",
      "retrieveByLevelLegacy",
      ...queryKeyBase,
    ],
  });
}

export function invalidateAllSubscribersPreferencesRetrieveByLevelLegacy(
  client: QueryClient,
  filters?: Omit<InvalidateQueryFilters, "queryKey" | "predicate" | "exact">,
): Promise<void> {
  return client.invalidateQueries({
    ...filters,
    queryKey: ["@novu/api", "Preferences", "retrieveByLevelLegacy"],
  });
}

export function buildSubscribersPreferencesRetrieveByLevelLegacyQuery(
  client$: NovuCore,
  request:
    operations.SubscribersV1ControllerGetSubscriberPreferenceByLevelRequest,
  options?: RequestOptions,
): {
  queryKey: QueryKey;
  queryFn: (
    context: QueryFunctionContext,
  ) => Promise<SubscribersPreferencesRetrieveByLevelLegacyQueryData>;
} {
  return {
    queryKey: queryKeySubscribersPreferencesRetrieveByLevelLegacy(
      request.preferenceLevel,
      request.subscriberId,
      {
        includeInactiveChannels: request.includeInactiveChannels,
        idempotencyKey: request.idempotencyKey,
      },
    ),
    queryFn: async function subscribersPreferencesRetrieveByLevelLegacyQueryFn(
      ctx,
    ): Promise<SubscribersPreferencesRetrieveByLevelLegacyQueryData> {
      const sig = combineSignals(ctx.signal, options?.fetchOptions?.signal);
      const mergedOptions = {
        ...options,
        fetchOptions: { ...options?.fetchOptions, signal: sig },
      };

      return unwrapAsync(subscribersPreferencesRetrieveByLevelLegacy(
        client$,
        request,
        mergedOptions,
      ));
    },
  };
}

export function queryKeySubscribersPreferencesRetrieveByLevelLegacy(
  preferenceLevel: operations.Parameter,
  subscriberId: string,
  parameters: {
    includeInactiveChannels?: boolean | undefined;
    idempotencyKey?: string | undefined;
  },
): QueryKey {
  return [
    "@novu/api",
    "Preferences",
    "retrieveByLevelLegacy",
    preferenceLevel,
    subscriberId,
    parameters,
  ];
}
