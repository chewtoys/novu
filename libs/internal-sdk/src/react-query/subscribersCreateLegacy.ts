/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import {
  MutationKey,
  useMutation,
  UseMutationResult,
} from "@tanstack/react-query";
import { NovuCore } from "../core.js";
import { subscribersCreateLegacy } from "../funcs/subscribersCreateLegacy.js";
import { combineSignals } from "../lib/primitives.js";
import { RequestOptions } from "../lib/sdks.js";
import * as components from "../models/components/index.js";
import * as operations from "../models/operations/index.js";
import { unwrapAsync } from "../types/fp.js";
import { useNovuContext } from "./_context.js";
import { MutationHookOptions } from "./_types.js";

export type SubscribersCreateLegacyMutationVariables = {
  createSubscriberRequestDto: components.CreateSubscriberRequestDto;
  idempotencyKey?: string | undefined;
  options?: RequestOptions;
};

export type SubscribersCreateLegacyMutationData =
  operations.SubscribersV1ControllerCreateSubscriberResponse;

/**
 * Create subscriber
 *
 * @remarks
 * Creates a subscriber entity, in the Novu platform. The subscriber will be later used to receive notifications, and access notification feeds. Communication credentials such as email, phone number, and 3 rd party credentials i.e slack tokens could be later associated to this entity.
 */
export function useSubscribersCreateLegacyMutation(
  options?: MutationHookOptions<
    SubscribersCreateLegacyMutationData,
    Error,
    SubscribersCreateLegacyMutationVariables
  >,
): UseMutationResult<
  SubscribersCreateLegacyMutationData,
  Error,
  SubscribersCreateLegacyMutationVariables
> {
  const client = useNovuContext();
  return useMutation({
    ...buildSubscribersCreateLegacyMutation(client, options),
    ...options,
  });
}

export function mutationKeySubscribersCreateLegacy(): MutationKey {
  return ["@novu/api", "Subscribers", "createLegacy"];
}

export function buildSubscribersCreateLegacyMutation(
  client$: NovuCore,
  hookOptions?: RequestOptions,
): {
  mutationKey: MutationKey;
  mutationFn: (
    variables: SubscribersCreateLegacyMutationVariables,
  ) => Promise<SubscribersCreateLegacyMutationData>;
} {
  return {
    mutationKey: mutationKeySubscribersCreateLegacy(),
    mutationFn: function subscribersCreateLegacyMutationFn({
      createSubscriberRequestDto,
      idempotencyKey,
      options,
    }): Promise<SubscribersCreateLegacyMutationData> {
      const mergedOptions = {
        ...hookOptions,
        ...options,
        fetchOptions: {
          ...hookOptions?.fetchOptions,
          ...options?.fetchOptions,
          signal: combineSignals(
            hookOptions?.fetchOptions?.signal,
            options?.fetchOptions?.signal,
          ),
        },
      };
      return unwrapAsync(subscribersCreateLegacy(
        client$,
        createSubscriberRequestDto,
        idempotencyKey,
        mergedOptions,
      ));
    },
  };
}
